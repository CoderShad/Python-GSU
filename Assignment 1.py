# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VIsja1un50nCDfH8QIeNbaE-OYbI1-xp
"""

import yfinance as yf
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

#Download Netflix stock data from 2004-01-2 to 2019-12-31 and store it in Data
Data = yf.download("NFLX", start = "2004-01-02", end = "2019-12-31")

#See Data type
print(type(Data))
print(Data.head())

#Plot NFLX stock price
Data['Close'].plot(title="NFLX's stock price")

plt.show()

#Computing Log returns: logRt=ln(P1/P0) equivalently logRt=ln(P1)-ln(P0)
nflx_daily_log_returns=np.log(Data['Close']/Data['Close'].shift(1))

nflx_daily_log_returns=nflx_daily_log_returns.dropna()

#Print netflix daily log returns
print(nflx_daily_log_returns)

#Plot Netflix's daily lof return
nflx_daily_log_returns.plot(title="NFLX's daily log return")
plt.show()

#Compute mean, std dev, minimum, maximum of the lofg return series
print(nflx_daily_log_returns.describe())

# histogram of daily retuns

fig = plt.figure()
ax1 = fig.add_axes([0.1,0.1,0.8,0.8])
nflx_daily_log_returns.plot.hist(bins = 60)
ax1.set_ylabel("Frequency")
ax1.set_title("NFLX's daily log returns data")
ax1.text(-0.35,200,"Extreme Low\nreturns")
ax1.text(0.25,200,"Extreme High\nreturns")
plt.show()

#One-sample t-test for returns

#Null Hypothesis (H0): mean is equal to zero. Alterantive to null: is that mean is not equal to zero. Since p value<0.05,
#we reject H0: conclude that mean of daily log returns of NFLX are statistcally different than 0.

##https://datafai.com/how-to-conduct-one-sample-and-two-sample-t-test-in-python/

from scipy.stats import norm
from scipy import stats
print(stats.ttest_1samp(nflx_daily_log_returns,0))

"""
Summary:

The analysis explores Netflix's stock performance from 2004 to 2019 by downloading historical stock data from yfinance,
calculating daily log returns, and creating visualizations of stock prices and returns to identify trends.
Descriptive statistics, such as the mean, standard deviation, minimum, and maximum, are calculated for the daily log returns to
provide a deeper understanding of their distribution.

Additionally, a histogram is created to show the frequency of different return levels, with an emphasis on extreme values.
A one-sample t-test is then used to determine if the average of the daily log returns is significantly different from zero.
The results show that Netflix's daily log returns are statistically different from zero (p-value < 0.05),
indicating that there is a consistent, non-zero average return over the period analyzed.

"""

#Question 2

#Define the list of stock symbols you want to download data for
stocks = ["AAPL", "MSFT", "GOOGL"]

# Download the data
data3 = yf.download(stocks, start="2005-01-02", end="2019-12-31")

adj_close_data =  data3["Adj Close"]

print(adj_close_data.head())
#check data type
print(type(adj_close_data))
#check data dimensions
print(adj_close_data.shape)
#observe first 5 rows of data
print(adj_close_data.head())

#monthly returns
adj_monthly_close_data = adj_close_data.resample('M').ffill()
print(adj_monthly_close_data.head())

#Plot
adj_monthly_close_data.plot(title= "Monthly Adjusted Closing Prices Chart")
plt.ylabel("Adjusted Closing Price (USD)")
plt.grid(True)
plt.show()

#subplots
fig, axes = plt.subplots(3, 1, figsize=(10, 8), sharex=True)
for i, stock in enumerate(stocks):
    adj_monthly_close_data[stock].plot(ax=axes[i], title=f'Monthly Adjusted Closing Price: {stock}')
    axes[i].set_ylabel('Price (USD)')
    axes[i].grid(True)
plt.xlabel('Date')
plt.tight_layout()
plt.show()

#Log returns
LogReturns = np.log(adj_monthly_close_data/adj_monthly_close_data.shift(1))
print(LogReturns.head())

LogReturns = LogReturns.dropna()

#LogReturns Plot
LogReturns.plot(title= "Monthly Log Returns Chart")
plt.ylabel("Log returns")
plt.grid(True)
plt.show()

#LogReturns subplots
fig, axes = plt.subplots(3, 1, figsize=(10, 8), sharex=True)
for i, stock in enumerate(stocks):
    LogReturns[stock].plot(ax=axes[i], title=f'Monthly Log Returns Chart: {stock}')
    axes[i].set_ylabel('Log returns')
    axes[i].grid(True)
plt.xlabel('Date')
plt.tight_layout()
plt.show()

#Compute mean, std dev, minimum, maximum of the lofg return series
print(LogReturns.describe())

#Hisogram - APPL
fig = plt.figure()
ax1 = fig.add_axes([0.1,0.1,0.8,0.8])
LogReturns["AAPL"].plot.hist(bins = 60)
ax1.set_ylabel("Frequency")
ax1.set_title("Apple's daily log returns data")
ax1.text(-0.35,200,"Extreme Low\nreturns")
ax1.text(0.25,200,"Extreme High\nreturns")
plt.show()

#Hisogram - GOOGL
fig = plt.figure()
ax1 = fig.add_axes([0.1,0.1,0.8,0.8])
LogReturns["GOOGL"].plot.hist(bins = 60)
ax1.set_ylabel("Frequency")
ax1.set_title("Google's daily log returns data")
ax1.text(-0.35,200,"Extreme Low\nreturns")
ax1.text(0.25,200,"Extreme High\nreturns")
plt.show()

#Hisogram - MSFT
fig = plt.figure()
ax1 = fig.add_axes([0.1,0.1,0.8,0.8])
LogReturns["MSFT"].plot.hist(bins = 60)
ax1.set_ylabel("Frequency")
ax1.set_title(" Microsoft's daily log returns data")
ax1.text(-0.35,200,"Extreme Low\nreturns")
ax1.text(0.25,200,"Extreme High\nreturns")
plt.show()

#T-TEst
print(stats.ttest_1samp(LogReturns["GOOGL"],0))
print(stats.ttest_1samp(LogReturns["AAPL"],0))
print(stats.ttest_1samp(LogReturns["MSFT"],0))

# Calculate total period return for each stock using cumulative sum of log returns
total_period_returns = (LogReturns.sum() -  1) * 100
print(total_period_returns)

# Calculate average return for each stock
average_returns = LogReturns.mean() * 100

# Add % sign to results
total_period_returns = total_period_returns.round(2).astype(str) + '%'
average_returns = average_returns.round(2).astype(str) + '%'

# Output the results
print("Total Holding Period Log Return: ")
print(total_period_returns)
print("\nAverage Monthly Log Returns:")
print(average_returns)

"""
This analysis evaluates the performance of Apple (AAPL), Microsoft (MSFT), and Google (GOOGL) stocks from 2005 to 2019 using
adjusted closing prices downloaded with the yfinance library. Monthly adjusted closing prices are plotted to visualize trends,
and log returns are calculated to assess price changes and volatility. Descriptive statistics, including the mean,
standard deviation, minimum, and maximum of the log returns, provide insights into the variability and distribution of returns.
Histograms for each stock show the frequency of returns and highlight extreme values.

Additionally, A one-sample t-test on each stockâ€™s log returns checks if the average return is significantly different from zero,
indicating a consistent trend in returns. Finally, the total holding period returns and average monthly log returns are calculated
to summarize the overall performance of each stock throughout the period.


"""